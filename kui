#!/bin/bash
  REMOTE=8080     # Remote port for tunneling.
   LOCAL=8080     # Local  port for tunneling.
  EDITOR=nano     # Default editor
  KUBCMD='ps -ef' # Default command to run in pods
  quickl='----{ Quick selection }----'
  quickd='---------------------------'
  F_BUTT='1     filter               ' # Filter items button
  N_BUTT='2     namespaces           ' # Namespace quick select button
  T_BUTT='3     change type          ' # Object type(pod,deploy...) quick select button
  C_BUTT='4     clusters             ' # Cluster quick select button
  D_BUTT='5     nodes                ' # Nodes quick select button
  P_BUTT='6     top nodes            ' # Top nodes quick select button
  W_BUTT='7     watch it             ' # Watch for a while how it's going
CONFILES=$(echo ~/.kube/{config,config*[!~]}) # k8s confiles list.
OBJ_LIST=(       # k8s objects to observe, list will be updated
#--------------------+---------------------+
#    type            |   name in menu      |
#--------------------+---------------------+
     pod               Pods
     job               Jobs
     ''                '' #delimiter
     statefulset       Statefulsets
     replicaset        Replicasets
     deployment        Deployments
     daemonset         Daemonsets
     ''                '' #delimiter
     cronjob           Cronjobs
     service           Services
     ingress           Ingresses
     event             Events
     ''                '' #delimiter
     componentstatuse  Componentstatuses
     serviceaccount    Serviceaccounts
     podtemplate       Podtemplates
     limitrange        Limitranges
     configmap         Configmaps
     endpoint          Endpoints
     secret            Secrets
)

outputypes=(json yaml wide name)
printf -v outputypes_list '%s|' ${outputypes[@]}
cmds_regen(){  # Commands to run, list will be updated
               #-----------------------+--------------------------------------------------------------+
               #   Command name        |   Description                                                |
               #-----------------------+--------------------------------------------------------------+
    quick_butt=(  ''     ''              "$quickl" "$quickd"
                  "$F_BUTT"              "Filter items               "
                  "$N_BUTT"              "Go to namespace selection  "
                  "$T_BUTT"              "Go to object type selection"
                  "$C_BUTT"              "Go to cluster selection    "
                  "$D_BUTT"              "Go to node selection"
                  "$P_BUTT"              "Go to top node selection"
                  "$W_BUTT"              "Watch for a while how it's going"                           )
    descr_cmds=(   Get                   "Get this $type"
                   Describe              "Describe this $type"
                   Output                "Change output mode to: ${outputypes_list%|}"                      )
    label_cmds=(   Label                 "Set this $type as label"                                    )
    scale_cmds=(   Scale                 "Change number of replicas in this $type"                    )
   delete_cmds=(   Delete                "Delete this $type"
                   Termination           "Delete this $type using --force"                            )
   common_cmds=(  "${descr_cmds[@]}"
                  ''                     ''  # delimiter
                   Logs                  "Get $type logs"
                  'Logs all'             "Get $type logs from all containers at once!"
                   Search                "Grep something in logs"
                   Container             'Select container to run command or get logs from'
                   Edit                  "Edit this $type"
                  ''                     ''  # delimiter
                  "${delete_cmds[@]}"                                                                 )
      top_cmds=(  "Top $type"            "Show metrics for this $type"
                  "Top ${type}s"         "Show metrics for all ${type}s"                              )
  rollout_cmds=(  'Rollout restart'      "Restart this $type"
                  'Rollout status '      "Show the status of this $type's rollout"
                  'Rollout pause  '      "Mark the provided this $type as paused"
                  'Rollout resume '      "Resume this paused $type"
                  'Rollout undo   '      "Undo a previous rollout of this $type"
                  'Rollout history'      "View rollout history of this $type"                         )
     exec_cmds=(  "Execute $KUBCMD"      "Run '\Z1$KUBCMD\Z0' command inside this $type"
                  'Change command'       "Change the command"                                         )
     pfwd_cmds=(  'Port-forward'         "Forward local port \Z2$LOCAL\Z0 to pods port \Z2$REMOTE\Z0"
                  'Change local port'    "Change local(\Z2$LOCAL\Z0) port"
                  "Change pod's port"    "Change pod's(\Z2$REMOTE\Z0) port"                           )
    shell_cmds=(  'Interactive shell'    "Open an interactive shell inside this $type"                )
     cron_cmds=(  'Suspend'              "Suspend this $type"
                  'Unsuspend'            "Unsuspend this $type"
                   Delete                "Delete this $type"
                   Edit                  "Edit this $type"                                            )
     node_cmds=(   Condom                "Make this $type unschedulable"
                   Uncondome             "Make this $type schedulable again"
                   Drain                 "Drain this $type in preparation for maintenance"

                  'Node pods'            "Show pods of this node"
                  'Top node pods'        "Show top pods of this node"

                  ''                     ''  # delimiter
                  "${top_cmds[@]}"                                                                    )
      pod_cmds=(  "${descr_cmds[@]}"
                  ''                     ''  # delimiter
                   Logs                  "Get $type logs"
                  'Logs all'             "Get $type logs from all containers at once!"
                   Search                "Grep something in logs"
                   Container             'Select container to run command or get logs from'
                  'Controlled by'        "Jump to the object that controls this pod"
                  ''                     ''  # delimiter
                  "${delete_cmds[@]}"
                  ''                     ''  # delimiter
                  "${top_cmds[@]}"
                  ''                     ''  # delimiter
                  "${shell_cmds[@]}"
                  ''                     ''  # delimiter
                  "${exec_cmds[@]}"
                  ''                     ''  # delimiter
                  "${pfwd_cmds[@]}"                                                                   )
     depl_cmds=(  "${common_cmds[@]}"
                  ''                     ''  # delimiter
                  "${label_cmds[@]}"
                  ''                     ''  # delimiter
                  "${scale_cmds[@]}"
                  ''                     ''  # delimiter
                  "${rollout_cmds[@]}"
                  ''                     ''  # delimiter
                  "${exec_cmds[@]}"
                  ''                     ''  # delimiter
                  "${pfwd_cmds[@]}"                                                                   )
}; cmds_regen

confile=~/.kdrc
tmpfile=/tmp/kdrc
[[ -s $confile ]] && . "$confile"
[[ -s $tmpfile ]] && . "$tmpfile"
#--------------------------------------------------------------------+
#Color picker, usage: printf $BLD$CUR$RED$BBLU'Hello World!'$DEF     |
#-------------------------+--------------------------------+---------+
#       Text color        |       Background color         |         |
#-----------+-------------+--------------+-----------------+         |
# Base color|Lighter shade| Base color   | Lighter shade   |         |
#-----------+-------------+--------------+-----------------+         |
BLK='\e[30m'; blk='\e[90m'; BBLK='\e[40m'; bblk='\e[100m' #| Black   |
RED='\e[31m'; red='\e[91m'; BRED='\e[41m'; bred='\e[101m' #| Red     |
GRN='\e[32m'; grn='\e[92m'; BGRN='\e[42m'; bgrn='\e[102m' #| Green   |
YLW='\e[33m'; ylw='\e[93m'; BYLW='\e[43m'; bylw='\e[103m' #| Yellow  |
BLU='\e[34m'; blu='\e[94m'; BBLU='\e[44m'; bblu='\e[104m' #| Blue    |
MGN='\e[35m'; mgn='\e[95m'; BMGN='\e[45m'; bmgn='\e[105m' #| Magenta |
CYN='\e[36m'; cyn='\e[96m'; BCYN='\e[46m'; bcyn='\e[106m' #| Cyan    |
WHT='\e[37m'; wht='\e[97m'; BWHT='\e[47m'; bwht='\e[107m' #| White   |
#-------------------------{ Effects }----------------------+---------+
DEF='\e[0m'   #Default color and effects                             |
BLD='\e[1m'   #Bold\brighter                                         |
DIM='\e[2m'   #Dim\darker                                            |
CUR='\e[3m'   #Italic font                                           |
UND='\e[4m'   #Underline                                             |
INV='\e[7m'   #Inverted                                              |
COF='\e[?25l' #Cursor Off                                            |
CON='\e[?25h' #Cursor On                                             |
#------------------------{ Functions }-------------------------------+
# Text positioning, usage: XY 10 10 'Hello World!'                   |
XY(){ printf "\e[$2;${1}H$3"; }                                     #|
# Print line, usage: line - 10 | line -= 20 | line 'Hello World!' 20 |
line(){ printf -v _L %$2s; printf -- "${_L// /$1}"; }               #|
# Create sequence like {0..(X-1)}, usage: que 10                     |
que(){ printf -v _N %$1s; _N=(${_N// / 1}); printf "${!_N[*]}"; }   #|
#--------------------------------------------------------------------+
install_help="
${BLD}kd$DEF requires that the package '${GRN}%s$DEF' is installed.
Type this into the terminal and press return:

    ${BLD}%s$DEF

Then run ${BLD}kd$DEF again
"
how_to_install () {
    which yum     &> /dev/null && installer="yum -y install $1"
    which brew    &> /dev/null && installer="brew install $1"
    which apt-get &> /dev/null && installer="apt-get install -y $1"
    printf "$install_help" "$1" "$installer"
    exit 1
}

which dialog  &> /dev/null || how_to_install dialog
which kubectl &> /dev/null || how_to_install kubectl
#------------------------{ Show\Edit ssh config }--------------------------------------------------
show_conf () { clear; ssh -G $target; pause; }
edit_conf () { $EDITOR $(grep -ril "Host[[:space:]]$target" $CONFILES); }

#------------------------{ Pause function }--------------------------------------------------------
pause () {
    local  mess=${1:-'Press any key to continue'}
    printf "\n$COF$BLD$mess\n"
    read -srn1 answer
    [[ $1 =~ [Rr]epeat ]] && {
        case $answer in
             [Rr]) repeat "$kube_cmd";;
        esac
    }
    printf "\n$DEF$CON"
}

#------------------------{ kubectl starter }-------------------------------------------------------
kube(){ kubectl --kubeconfig="$kubconfig" "$@"; }

#------------------------{ Exit function }---------------------------------------------------------
bye () {
    GO
    echo   "cluster=$cluster"   >  "$tmpfile"
    echo "namespace=$namespace" >> "$tmpfile"
    [[ $(uname -s) == "Darwin" ]] && ls -G || ls --color=auto
    exit 0
};  trap bye INT TERM SIGINT SIGTERM EXIT

#------------------------{ Cursor disable\enable }-------------------------------------------------
cursor () {
    case $1 in
         on) stty  echo; printf "$CON";;
        off) stty -echo; printf "$COF";;
    esac
}

#------------------------{ Waiting animation }-----------------------------------------------------
   x=$[COLUMNS/2-3]
   y=$[  LINES/2-3]
sand=( ⠁  ⠂  ⠄  ' ' )
#  {   small digits    }
sd=(₀ ₁ ₂ ₃ ₄ ₅ ₆ ₇ ₈ ₉)
bs='⠴⠷⠦' # bottom sand pile
ts='⠖'    #  top  sand pile
WAIT(){
    clear; cursor off; i=0; start=$SECONDS
    XY $[x-1]  $y    $UND$BLD$RED'       '$DEF                     # _______
    XY $[x-1] $[y+1]         $RED'╲'$DIM$UND'     '$DEF$red'╱'$DEF # ╲_____╱
    XY  $x    $[y+2]         $BLU'(  '$BLD$WHT'•'$BLD$BLU')'$DEF   #  (  •)
    XY  $x    $[y+3]         $BLU' ╲'$YLW"$ts"$BLD$BLU'╱'$DEF      #   ╲⠖╱
    XY  $x    $[y+4]         $BLU" ╱$YLW${sand[$i]}$BLD$BLU╲"$DEF  #   ╱⠂╲
    XY  $x    $[y+5]         $BLU'('$YLW"$bs"$BLD$BLU')'$DEF       #  (⠴⠷⠦)
    XY $[x-1] $[y+6]         $RED'╱'$RED'‾‾‾‾‾'$BLD$RED'╲'$DEF     # ╱‾‾‾‾‾╲
    XY $[x-1] $[y+7]     $DIM$RED'‾‾‾‾‾‾‾'$DEF                     # ‾‾‾‾‾‾‾
    ( while true; do sleep 0.07
        printf -v counter "%03d" $[SECONDS-start]
        small="${sd[${counter:0:1}]}${sd[${counter:1:1}]}${sd[${counter:2:1}]}"
        XY $[x-1] $[y+1] $RED'╲'$DIM$UND" $small "$DEF$red'╱'$DEF
        XY  $x    $[y+4] $BLU" ╱$YLW${sand[$i]}$BLD$BLU╲"$DEF
        ((i++)); (($i==${#sand[@]})) && i=0;
    done ) & waiter=$!
}

GO() { [[ -e /proc/$waiter ]] && kill $waiter; cursor on; clear; }

#------------------------{ Dialog creator }--------------------------------------------------------
D(){
    local type="$1"
    local name="$2"
    local oklb="$3"
    local nolb="$4"
    local opts="$5"
    shift        5

    case $type in
          menu) local size='0 0 0';;
      inputbox) local size='10 60';;
    esac

    dialog   $opts                     \
           --no-collapse --output-fd 1 \
           --colors      --aspect  100 \
           --ok-label     "$oklb" \
           --cancel-label "$nolb" \
           --$type        "$name" \
             $size   --   "$@"
}

#------------------------{ Change ports used in port-forwarding command }--------------------------
local_port(){
    new_local=$(D inputbox 'Change local port' CHANGE BACK '--max-input 5' $LOCAL)
    LOCAL=${new_local:-$LOCAL}
    cmds_regen
}

remote_port(){
    new_remote=$(D inputbox 'Change remote port' CHANGE BACK '--max-input 5' $REMOTE)
    REMOTE=${new_remote:-$REMOTE}
    cmds_regen
}

#------------------------{ Change command to run in pod }------------------------------------------
change_command(){
    new_kubcmd=$(D inputbox 'Change command to run in pod' CHANGE BACK '--max-input 255' "$KUBCMD")
    KUBCMD="${new_kubcmd:-$KUBCMD}"
    cmds_regen
}

#------------------------{ Regenerate titles for dialogs }-----------------------------------------
change_title(){
    list_header=
    [[ $columns ]] && {
        printf -v cn "    %-$((${name_size:-40}+2))s" NAME
        cd=$(awk '{print substr($0, index($0,$2))}' <<< "$columns")
        list_header="\Z4$cn$cd\Z0"
    }
                      use_of_labels=
    [[ $labels  ]] && use_of_labels="Labels: \Z2$labels\Z0\\n"
                      nfiltered_by=
    [[ $nfilter ]] && nfiltered_by="(filtered \Z2\"$nfilter\"\Z0)"
                      ofiltered_by=
    [[ $ofilter ]] && ofiltered_by="(filtered \Z2\"$ofilter\"\Z0)"

    printf -v    ns_title "$use_of_labels""Cluster: \Z4%b\Z0\nSelect namespace$nfiltered_by:\n\n%b" "$cluster" "$list_header"
    printf -v short_title 'Cluster: \Z4%b\Z0\nNamespace: \Z4%b\Z0\n%b\n\n%b' \
        "$cluster"    \
        "$namespace"  \
        "$use_of_labels""$filtered_by""Select ${type:-object}$ofiltered_by:" \
        "$list_header"

    printf -v  full_title 'Cluster: \Z4%b\Z0\nNamespace: \Z4%b\Z0\n%b: \Z4%b\Z0\nContainer: \Z4%b\Z0\n%b' \
        "$cluster"   \
        "$namespace" \
        "$use_of_labels""${type^}" \
        "$object" \
        "$container" \
        "$containers_info"
}

#------------------------{ Change grep search pattern }--------------------------------------------
what_to_search(){
    search_pattern=$(D inputbox 'Search this in logs' SEARCH BACK '--max-input 255' "$search_pattern")
	case $? in
         0) cmds_regen;;
      	 1) play_with_$type;;
  	esac
}

#------------------------{ Change output of get command }------------------------------------------
select_output(){
          output=$(D menu "Select output type:" SELECT EXIT --no-items "${outputypes[@]}")
	case $output:$? in
               *:0) inoutput="-o $output";;
  	esac
}

#-----------------------------------{ Selectors }--------------------------------------------------
select_cluster(){
    cluster=$(D menu "Select cluster:" SELECT EXIT '--no-items --extra-button --extra-label NODES --help-button --help-label TOP' "${!clusters[@]}")
	case $? in
         0) kubconfig="${clusters[$cluster]}"
            select_namespace;;
         2) cluster=${cluster//HELP /}
            kubconfig="${clusters[$cluster]}"
            select_node top;;
         3) kubconfig="${clusters[$cluster]}"
            select_node;;
      	 1) bye;;
  	esac
}

select_node(){
    type=node
    select_object $1
}

objlist_gen(){
    name_size=$(awk 'a=length($1){};(n<a){n=a}END{print n}' <<< "$data")
    ((name_size<40)) && name_size=40
    mapfile -t obj_names < <(awk '{printf "%-'"$name_size"'s\n", $1}' <<< "$data")
    mapfile -t obj_descs < <(awk '{n=split($0,a," ",b);a[1]="";b[1]="";line=""
                                  for(i=1;i<=n;i++)line=(line a[i] b[i]);print line}' <<< "$data")
    columns="${obj_names[0]}${obj_descs[0]}"
    noo=${#obj_names[*]}
    change_title
    [[ $1 == namespace ]] && {
        for ((i=1; i<noo; i++)); do
              namespaces+=("${obj_names[$i]}" "${obj_descs[$i]}")
        done; namespaces_to_filter=( "${namespaces[@]}" )
        return
    }
    for ((i=1; i<noo; i++)); do
          objects+=("${obj_names[$i]}" "${obj_descs[$i]}")
          [[ $namespace =~ All ]] && nstore[${obj_names[$i]}]=${obj_descs[$i]}
    done
    objects_to_filter=( "${objects[@]}" )
}

filter_items(){
    case $1 in
         ns) to_filter=( "${namespaces_to_filter[@]}" );;
        obj) to_filter=( "${objects_to_filter[@]}"    );;
    esac

    local  N=${#to_filter[@]} filtered_list=()
    fpattern=$([[ $3 ]] && echo $3 || D inputbox 'Enter filter pattern:' SET CLEAR '--max-input 200 --help-button --help-label BACK' "$fpattern")
	case $fpattern:$? in
                 *:0) fpattern=${fpattern,,}
                      for ((n=0,d=1; n<N; n+=2,d+=2)); do
                          filter_by=${to_filter[n]}
                          [[ $fpattern =~ \# ]] && filter_by=${to_filter[d]}
                          [[ ${filter_by,,} =~ ${fpattern//\#} ]] && {
                              filtered_list+=( "${to_filter[n]}" "${to_filter[d]}" )
                          }
                      done
                      [[ ${filtered_list[@]} ]] || { clear; pause 'Nothing found'; $2; }
                      case $1 in
                           ns) namespaces=( "${filtered_list[@]}" ) nfilter=$fpattern;;
                          obj) objects=(    "${filtered_list[@]}" ) ofilter=$fpattern;;
                      esac;;
            *:1|'':0) unset filtered_list fpattern
                      case $1 in
                           ns) namespaces=() nfilter=;;
                          obj)    objects=() ofilter=;;
                      esac;;
                 *:2)   $2;;
	esac; change_title; $2
}

select_namespace(){  with_labels=
    [[ $labels ]] && with_labels="-l $labels"
    [[ ${namespaces[@]} ]] || {
        WAIT
        data=$(kube get ns $with_labels)
        objlist_gen namespace
        GO
        [[ $nfilter ]] && filter_items ns 'select_namespace' $nfilter
    }
    old_namespace=$namespace
    namespace=$(
        D menu "$ns_title" SELECT LABELS \
          '--extra-button --extra-label RELOAD --help-button --help-label SELECT_CLUSTER' \
          All 'All namespaces' "${namespaces[@]}" "${quick_butt[@]:0:6}" "$D_BUTT" "Select nodes" "$P_BUTT" "Select top nodes" # add filter and nodes option
    )
	case $namespace:$? in
	   $quickl:0|'':0) select_namespace                        ;;
	        $F_BUTT:0) filter_items ns 'select_namespace'      ;;
	        $D_BUTT:0) namespace=$old_namespace select_node    ;;
	        $P_BUTT:0) namespace=$old_namespace select_node top;;
                All:0) ns="--all-namespaces";;
                  *:0) ns="-n $namespace"   ;;
                  *:1) type=ns select_labels;; # LABELS pressed
      	          *:2) columns= nfilter= namespaces=()
                       select_cluster       ;; # SELECT_CLUSTER pressed
                  *:3) columns= namespaces=()
                       select_namespace     ;; # RELOAD pressed
  	esac;              columns=
                       change_title
                       select_type
}

select_type(){
    type=
    containers_info
    type_quick=(
        ''        "$quickl"
        "$N_BUTT" "$N_BUTT"
        "$C_BUTT" "$C_BUTT"
        "$D_BUTT" "$D_BUTT"
        "$P_BUTT" "$P_BUTT"
    )
    change_title
          type=$(D menu "$short_title" SELECT SELECT_NAMESPACE --no-tags "${OBJ_LIST[@]}" '' '' "${type_quick[@]}")
	case $type:$? in
            '':0) select_type;;
       $N_BUTT:0) columns= objects=();                select_namespace ;; # quick
       $C_BUTT:0) columns= objects=()  namespaces=(); select_cluster   ;; # buttons
       $D_BUTT:0) columns= objects=(); select_node    ;;
       $P_BUTT:0) columns= objects=(); select_node top;;

         event:0) play_with_event ;;
            '':0) select_type     ;;
             *:0) cmds_regen
                  change_title
                  select_object   ;;
      	     *:1) select_namespace;;
  	esac
}

select_labels(){
    labels=$(D inputbox 'Enter labels to use:' SET CLEAR  '--max-input 1000 --extra-button --extra-label SELECT --help-button --help-label BACK' "$labels")
    case $? in
         0) columns= objects=();;
         1) columns= objects=() labels=;;
         3) WAIT; labels_list=($(kube get $type $ns --show-labels | awk '!/LABELS/{print $NF}' | tr , '\n' | sort -u)); GO
            label=$(D menu "Select label:" SELECT BACK "--no-items --extra-button --extra-label ADD" "${labels_list[@]}")
            case $? in
                 0) labels=$label  ;;
                 3) labels+=,$label;;
            esac ;  columns= objects=()
    esac
    case $type in
           ns) type= namespaces=(); select_namespace;;
            *) select_object;;
    esac
}

custom_columns='NAME:.metadata.name,NAMESPACE:.metadata.namespace'
get_objects(){       with_labels=
    [[ $labels ]] && with_labels="-l $labels"
    case $namespace:$type in
                  *:node) WAIT; data=$(kube ${1:-get} $type $with_labels); GO; [[ ${namespace,,} =~ all ]] && namespace=;;
                All:*   ) WAIT; data=$(kube ${1:-get} $type $ns -o custom-columns="$custom_columns" $with_labels); GO;;
                  *:*   ) WAIT; data=$(kube ${1:-get} $type $ns $with_labels); GO;;
    esac
    objlist_gen
    [[ $ofilter ]] && filter_items obj 'select_object' $ofilter
}

watch_for_a_while(){
    clear
    cursor off
    with_labels=
    [[ $labels ]] && with_labels="-l $labels"
    while :; do
        case $namespace:$type in
                      *:node) data=$(kube ${1:-get} $type $with_labels); [[ ${namespace,,} =~ all ]] && namespace=;;
                    All:*   ) data=$(kube ${1:-get} $type $ns -o custom-columns="$custom_columns" $with_labels);;
                      *:*   ) data=$(kube ${1:-get} $type $ns $with_labels);;
        esac
        clear; echo "$data"; echo; echo "Press x to stop watching this..."
        read -srn1 -t3 answer
        [[ $answer =~ x|X ]] && return
    done
}

declare -A nstore
select_object(){
    incontainer=
    containers=
    container=
    modificator=
    [[ $1 ]] && modificator=$1
    new_quick=("${quick_butt[@]}")
    [[ $type == "node" ]] || [[ $namespace ]] || select_namespace
    [[  ${objects[@]}  ]] || get_objects $modificator
          object=$(D menu "$short_title" SELECT LABELS '--extra-button --extra-label RELOAD --help-button --help-label SELECT_TYPE' "${objects[@]}" "${quick_butt[@]}")
	case $object:$? in
		 $quickl:*) select_object $modificator;;
	          '':0) select_object $modificator;;
	     $N_BUTT:0) columns= objects=(); namespaces=(); select_namespace ;; # quick
         $T_BUTT:0) columns= objects=();  change_title; select_type      ;; # select
         $C_BUTT:0) columns= objects=()  namespaces=(); select_cluster   ;; # buttons
         $D_BUTT:0) columns= objects=(); select_node                     ;; # nodes
         $P_BUTT:0) columns= objects=(); select_node top                 ;; # top nodes
         $F_BUTT:0) filter_items  obj   "select_object $modificator"     ;; # filter
         $W_BUTT:0) watch_for_a_while;   select_object $modificator;;
           NAME*:0) select_object $modificator;;
           Empty:0) objects=(); select_type   ;;
               *:0) [[ ${nstore[$object]} ]] && namespace=${nstore[$object]} ns="-n $namespace" objects=()
                    cmds_regen
                    change_title
                    play_with_$type;;
               *:1) select_labels  ;; # LABELS pressed
               *:2) columns= objects=(); select_type               ;; # SELECT_TYPE pressed
               *:3) columns= objects=(); select_object $modificator;; # RELOAD pressed
  	esac
}

select_container(){
    WAIT
    case $type in
          pod)  jsonpath='{.spec.containers[*].name}';;
            *)  jsonpath='{.spec.template.spec.containers[*].name}';;
    esac;  [[ $containers ]] || containers=$(kube get $type/$object -o jsonpath="$jsonpath"  $ns)
    GO
    [[ $1 == 'containers' ]] && return
    container=$(D menu "Select container:" SELECT BACK --no-items ${containers:-none})
	case      $container:$? in
                    none:0) container=;;
                       *:0) change_title
                            incontainer="-c $container";;
  	esac;                   play_with_$type
}

repeat(){
    kube_cmd=$1
    local mess='Press any key to continue or R to repeat command'
    WAIT; data=$(kube $ns $kube_cmd 2>&1); GO; echo "$data"
    pause "$mess"
}

#------------------------{ All commands check }----------------------------------------------------
sure(){ dialog --defaultno --colors --yesno "${1:-Sure?}" 5 ${#1}; }  # Confirmation(yes/no) dialog

all_cmds_check(){
    containers_info=
    [[ $type = "pod" ]] && {
        WAIT; containers_info="$(
         echo "\Z0Containers info:\Z2"
         ( kube $ns get $type/$object -o jsonpath='
           {"ContainerName Ready Started RestartCount LastState\n"}{range .status.containerStatuses[*]}
           {.name}{" "}{.ready}{" "}{.started}{" "}{.restartCount}{" "}{.lastState.terminated.reason}{"("}{.lastState.terminated.exitCode}{")"}
           {"\n"}{end}' ) | column -t
        )"; GO
    };  change_title

    cmd=$(D menu "$full_title" RUN BACK '--extra-button --extra-label RELOAD' "$@"); err=$?; clear
    case     ${cmd,,}:$err in
         '':0|$quickl:0) play_with_$type;;
              $N_BUTT:0) columns= objects=();                select_namespace ;; # quick
              $T_BUTT:0) columns= objects=(); change_title ; select_type      ;; # select
              $C_BUTT:0) columns= objects=()  namespaces=(); select_cluster   ;; # buttons
              $D_BUTT:0) columns= objects=(); select_node     ;;
              $P_BUTT:0) columns= objects=(); select_node top ;;

                   '':0) play_with_$type;;
               search:0) what_to_search
                         WAIT; data=$(kube logs $type/$object $incontainer $ns 2>&1); GO; echo "$data" | grep -Ei "$search_pattern" || echo 'Nothing found :('; pause;;

                  # Repeatable commands
                  get:0) repeat "get  $type/$object $inoutput   ";;
                 logs:0) repeat "logs $type/$object $incontainer";;
       "top ${type}s":0) repeat "top  $type";;
          "top $type":0) repeat "top  $type $object";;
             execute*:0) repeat "exec $type/$object $incontainer $ns -- $KUBCMD";;

      'controlled by':0) WAIT; data=$(kube describe $type/$object $ns | awk '/Controlled By:/{print $3}'); GO
                         type=${data%/*}
                         type=${type,,}
                         object=${data#*/}
                         [[ $type == 'replicaset' ]] && {
                             type=deployment
                             object=${object%-*}
                         }
                         cmds_regen
                         change_title
                         play_with_$type;;
           'logs all':0) select_container containers
                         for c in $containers; {
                             echo "----------{ $c }----------"
                             kube logs $type/$object $ns -c $c
                         }
                         pause;;
          'node pods':0) tmp_ns=${ns:-'-A'}
                         WAIT; data=$(kube get po $tmp_ns --field-selector spec.nodeName="$object"); GO
                         echo "$data"; pause;;
      'top node pods':0) tmp_ns=${ns:-'-A'}
                         WAIT
                         [[ $ns ]] && np=$(kube get po $tmp_ns --field-selector spec.nodeName="$object" | awk '{print $1}')
                         [[ $ns ]] || np=$(kube get po $tmp_ns --field-selector spec.nodeName="$object" | awk '{print $2}')
                         data=$(kube top po $tmp_ns | grep -F "$np")
                         GO; echo "$data"; pause;;

             describe:0) WAIT; data=$(kube describe $type/$object $ns 2>&1); GO; echo "$data" ; pause;;
             rollout*:0) WAIT; data=$(kube ${cmd,,} $type/$object $ns 2>&1); GO; echo "$data" ; pause;;

                label:0) labels="app=$object"; change_title;;

                scale:0) WAIT; old_replicas=$(kube get $type/$object -o jsonpath="{.spec.replicas}" $ns); GO
                               new_replicas=$(D inputbox 'New replicas count:' SET BACK '--max-input 3' "$old_replicas")
                         WAIT; data=$(kube scale --replicas=$new_replicas $type/$object $ns 2>&1); GO; echo "$data";;

        port-forward*:0) kube port-forward $type/$object $LOCAL:$REMOTE $ns & pfpid=$!; pause "Press any key to terminate port-forwarding"; pkill -P $pfpid;;
        *'local port':0) local_port ;;
        *"pod's port":0) remote_port;;

  'interactive shell':0) kube exec $object $incontainer $ns --stdin --tty -- '/bin/sh' || pause;;
     'change command':0) change_command  ;;

              suspend:0) kube patch $type/$object $ns -p "{\"spec\" : {\"suspend\" : true }}" ;;
            unsuspend:0) kube patch $type/$object $ns -p "{\"spec\" : {\"suspend\" : false }}";;

               output:0) select_output   ;;
            container:0) select_container;;

                drain:0) kube_cmd="${cmd,,} $object --force --grace-period=-1 --ignore-daemonsets"
                         sure "Sure to run \Z1kubectl $kube_cmd\Z0?" || play_with_$type
                         clear; kube $kube_cmd; pause;;
                 edit:0) KUBE_EDITOR=$EDITOR kube edit $type/$object $ns;;
               delete:0) kube_cmd="${cmd,,} $type/$object $ns"
                         sure "Sure to run \Z1kubectl $kube_cmd\Z0?" || play_with_$type
                         WAIT; kube $kube_cmd &> /dev/null; GO; objects=(); select_object;;

          termination:0) kube_cmd="delete $type/$object $ns --force --grace-period=0"
                         sure "Sure to run \Z1kubectl $kube_cmd\Z0?" || play_with_$type
                         WAIT; kube $kube_cmd &> /dev/null; GO; objects=(); select_object;;

               condom:0) kube_cmd="cordon $object"
                         sure "Sure to run \Z1kubectl $kube_cmd\Z0?" || play_with_$type
                         WAIT; kube $kube_cmd; GO; pause;;
            uncondome:0) kube_cmd="uncordon $object"
                         sure "Sure to run \Z1kubectl $kube_cmd\Z0?" || play_with_$type
                         WAIT; kube $kube_cmd; GO; pause;;

                    *:0) sure "Sure to run \Z1kubectl ${cmd,,} $object\Z0?" || play_with_$type
                         WAIT; data=$(kube ${cmd,,} $object 2>&1); GO; echo "$data"; pause;;

                    *:1) select_object $modificator;;
    esac;                play_with_$type
}

#------------------------{ Play with objects }-----------------------------------------------------
butt_no_filter=("${quick_butt[@]::4}" "${quick_butt[@]:6:10}")
play_with_event            (){ WAIT;  data=$(kube get $type $ns 2>&1);  GO;  echo "$data";  pause;  select_type; }
play_with_statefulset      (){ all_cmds_check "${common_cmds[@]}" "${scale_cmds[@]}"  ''  '' "${rollout_cmds[@]}" "${butt_no_filter[@]}"; }
play_with_node             (){ all_cmds_check "${descr_cmds[@]}"  '' '' "${node_cmds[@]}"    "${butt_no_filter[@]:0:10}"; }
play_with_daemonset        (){ all_cmds_check "${common_cmds[@]}" '' '' "${rollout_cmds[@]}" "${butt_no_filter[@]}"; }
play_with_cronjob          (){ all_cmds_check "${descr_cmds[@]}"  '' '' "${cron_cmds[@]}"    "${butt_no_filter[@]}"; }
play_with_secret           (){ all_cmds_check "${descr_cmds[@]}"  '' '' "${delete_cmds[@]}"  "${butt_no_filter[@]}"; }
play_with_replicaset       (){ all_cmds_check "${common_cmds[@]}" "${scale_cmds[@]}"         "${butt_no_filter[@]}"; }
play_with_deployment       (){ all_cmds_check "${depl_cmds[@]}"   "${butt_no_filter[@]}"; }
play_with_pod              (){ all_cmds_check "${pod_cmds[@]}"    "${butt_no_filter[@]}"; }
play_with_job              (){ all_cmds_check "${common_cmds[@]}" "${butt_no_filter[@]}"; }
play_with_componentstatuse (){ all_cmds_check "${descr_cmds[@]}"  "${butt_no_filter[@]}"; }
play_with_serviceaccount   (){ all_cmds_check "${descr_cmds[@]}"  "${butt_no_filter[@]}"; }
play_with_podtemplate      (){ all_cmds_check "${descr_cmds[@]}"  "${butt_no_filter[@]}"; }
play_with_limitrange       (){ all_cmds_check "${descr_cmds[@]}"  "${butt_no_filter[@]}"; }
play_with_configmap        (){ all_cmds_check "${descr_cmds[@]}"  "${butt_no_filter[@]}"; }
play_with_endpoint         (){ all_cmds_check "${descr_cmds[@]}"  "${butt_no_filter[@]}"; }
play_with_service          (){ all_cmds_check "${descr_cmds[@]}"  "${butt_no_filter[@]}"; }
play_with_ingress          (){ all_cmds_check "${descr_cmds[@]}"  "${butt_no_filter[@]}"; }

#-------------{ Create clusters list. Get cluster names from ~/.kube/config* }---------------------
declare  -A clusters
for conf in $CONFILES; do
    name=$(kubectl --kubeconfig="$conf" config view -o jsonpath='{.clusters[0].name}')
    clusters["$name"]="$conf"
done

[[ $cluster   ]] && kubconfig="${clusters[$cluster]}" || select_cluster
[[ $namespace ]] && case $namespace in
    All) ns="--all-namespaces";;
      *) ns="-n $namespace"   ;;
esac  || select_namespace
change_title
select_type
bye